import React, { useEffect, useState } from "react";
import {
    Box, Button, TextField, Typography, Paper, MenuItem, Stack, Snackbar, Alert,
} from "@mui/material";
import axios from "axios";

const PointEditForm = ({ pointId, onSuccess }) => {
    const [formData, setFormData] = useState({
        name: "", description: "", sym: "", lat: "", lng: "",
    });
    const [imageFile, setImageFile] = useState(null);
    const [existingImage, setExistingImage] = useState(null); // ‚úÖ ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°
    const [previewUrl, setPreviewUrl] = useState(null);
    const [snackbar, setSnackbar] = useState({ open: false, message: "", severity: "success" });

    useEffect(() => {
        axios.get(`http://localhost:3001/api/points/${pointId}`).then((res) => {
            const point = res.data;
            setFormData({
                name: point.name || "",
                description: point.description || "",
                sym: point.sym || "",
                lat: point.lat || "",
                lng: point.lng || "",
            });
            if (point.image) {
                setExistingImage(point.image); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÄ‡∏î‡∏¥‡∏°
                setPreviewUrl(`http://localhost:3001/uploads/${point.image}`);
            }
        }).catch(() => {
            setSnackbar({ open: true, message: "‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", severity: "error" });
        });
    }, [pointId]);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        setImageFile(file);
        setPreviewUrl(file ? URL.createObjectURL(file) : null);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const data = new FormData();
            Object.entries(formData).forEach(([key, val]) => data.append(key, val));
            if (imageFile) {
                data.append("image", imageFile);
            } else if (existingImage) {
                data.append("existingImage", existingImage); // ‚úÖ ‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏õ backend
            }

            await axios.put(`http://localhost:3001/api/points/${pointId}`, data);
            setSnackbar({ open: true, message: "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", severity: "success" });
            if (onSuccess) onSuccess();
        } catch {
            setSnackbar({ open: true, message: "‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", severity: "error" });
        }
    };

    return (
        <Paper sx={{ p: 3 }}>
            <Typography variant="h6">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏û‡∏¥‡∏Å‡∏±‡∏î</Typography>
            <Box component="form" onSubmit={handleSubmit}>
                <Stack spacing={2}>
                    <TextField label="‡∏ä‡∏∑‡πà‡∏≠" name="name" fullWidth required value={formData.name} onChange={handleChange} />
                    <TextField label="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢" name="description" fullWidth multiline value={formData.description} onChange={handleChange} />
                    <TextField label="‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå" name="sym" select fullWidth required value={formData.sym} onChange={handleChange}>
                        <MenuItem value="tourism-campingsite">‚õ∫ camp</MenuItem>
                        <MenuItem value="transport-car">üöó parking</MenuItem>
                        <MenuItem value="restaurant-coffee">‚òï coffee</MenuItem>
                        <MenuItem value="stores-flowers">üå∏ flower</MenuItem>
                        <MenuItem value="restaurant-restaurant">üçΩÔ∏è restaurant</MenuItem>
                        <MenuItem value="sport-hiking">ü•æ hiking</MenuItem>
                    </TextField>
                    <TextField label="‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (latitude)" name="lat" type="number" fullWidth required value={formData.lat} onChange={handleChange} />
                    <TextField label="‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î (longitude)" name="lng" type="number" fullWidth required value={formData.lng} onChange={handleChange} />
                    <Button variant="outlined" component="label">üì∑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û<input type="file" hidden onChange={handleFileChange} /></Button>
                    {previewUrl && <img src={previewUrl} alt="Preview" style={{ maxWidth: "100%" }} />}
                    <Button type="submit" variant="contained">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</Button>
                </Stack>
            </Box>

            <Snackbar open={snackbar.open} autoHideDuration={3000} onClose={() => setSnackbar({ ...snackbar, open: false })}>
                <Alert onClose={() => setSnackbar({ ...snackbar, open: false })} severity={snackbar.severity} variant="filled">
                    {snackbar.message}
                </Alert>
            </Snackbar>
        </Paper>
    );
};

export default PointEditForm;
